package GaudiPolicy
version v8r6

branches cmt doc

# LCG debug libraries are not distributed (LOCAL) ===========================
use LCG_Settings *
use Python * LCG_Interfaces -no_auto_imports

macro_remove  LCG_platform "" LOCAL&Linux  "_dbg"

# project strategies ========================================================
setup_strategy root

# global patterns ===========================================================

pattern -global include_none include_path none

pattern -global packageDir \
     macro <package>Dir "${<PACKAGE>ROOT}/${BINDIR}"


# include pattern ==========================================================

pattern install_more_includes \
    document install_more_includes install_more_includes more=<more> offset=<offset> ; \
    macro_prepend includes '' <project>_without_installarea ' $(ppcmd)"$(<package>_root)" ' ; \
    private ; \
    macro_prepend includes ' $(ppcmd)"$(<package>_root)" ' <project>_without_installarea '' ; \
    end_private

make_fragment install_more_includes -header=install_more_includes_header

cmtpath_pattern \
   macro <project>_home "<path>" ; \
   set   <project>_HOME "<path>"
   

cmtpath_pattern_reverse \
   macro <project>_install_include "" \
         <project>_without_installarea "" \
         <project>_with_installarea&Unix " <path>/$(<project>_installarea_prefix)/include "\
         <project>_with_installarea&WIN32 ' "<path>\$(<project>_installarea_prefix)\include"' ; \
   include_dirs ${<project>_install_include} 

macro copyInclude "cp -Rup " \
      WIN32       "xcopy /S/Q/Y/I/D " \
      Darwin      "cp -Rp"

# standard patterns ================================================================
pattern Obj2Doth \
    document obj2doth  <package>Obj2Doth ../xml/*.xml

pattern packageOpts \
    set <PACKAGE>OPTS "$(<package>_root)/options" WIN32 "$(<package>_root)\options"

# coding conventions ========================================================

pattern  RuleChecker \
     document rule_checker <package>Chk -group=RuleChecker ../src/*.cpp ../src/Lib/*.cpp ../src/component/*.cpp


# library name dependent patterns============================================ 
#     the library name is given as an argument
#     example: apply_pattern libraryShr library=GaudiKernel

pattern libraryShr\
    set <library>Shr   "" \
        <project>_without_installarea&Unix  "$(<package>Dir)/lib<library>" \
        <project>_without_installarea&WIN32  "$(<package>Dir)\<library>"

pattern library_stamps \
    macro <package>_stamps "${<PACKAGE>ROOT}/${BINDIR}/<library>.stamp "

pattern library_shlibflags \
    macro <library>_shlibflags "$(libraryshr_linkopts)"

pattern library_Clinkopts\
    macro_prepend <package>_linkopts " "\
    Unix&static    " $(<library>Dir)/lib<library>.a -u <library>_loadRef $(<import>_linkopts) $(<import2>_linkopts) $(<import3>_linkopts)"

pattern library_Cshlibflags \
    private ; \
    macro <library>_shlibflags "$(componentshr_linkopts) $(cmt_installarea_linkopts) $(<library>_use_linkopts)  " ; \  
    end_private

pattern library_Llinkopts \
    macro_append <package>_linkopts                 "" \
         <project>_with_installarea&Unix     " -l<library> "\
         <project>_with_installarea&WIN32    " <library>.lib "\
         <project>_without_installarea&Unix  " -L$(<package>Dir) -l<library> "\
         <project>_without_installarea&WIN32 " $(<package>Dir)/<library>.lib "\
                                Unix&static  " $(<package>Dir)/lib<library>.a "


pattern library_Lshlibflags \
    private ; \ 
    macro <library>_shlibflags "$(libraryshr_linkopts) $(cmt_installarea_linkopts) $(<library>_use_linkopts)" ; \
    macro_remove <library>_use_linkopts "$(<package>_linkopts)" ; \
    end_private

pattern library_Softlinks \
    macro_append <package>_libraries        "" \
         <project>_without_installarea&Unix " <library> "\
                 WIN32                      "" \
                 Unix&static                ""

cmtpath_pattern \
    path_prepend DYLD_LIBRARY_PATH "" <project>_with_installarea&Darwin "<path>/$(<project>_installarea_prefix)/${CMTCONFIG}/lib"

pattern library_path \
    path_remove PATH ""  WIN32 "\<package>\" ; \
    path_prepend PATH ""  \
        <project>_without_installarea&WIN32 "${<package>_root}\${<package>_tag}" ; \
    path_remove DYLD_LIBRARY_PATH "" Darwin "/<package>/" ; \
    path_append DYLD_LIBRARY_PATH "" \
        <project>_without_installarea&Darwin "${<package>_root}/${<package>_tag}" ; \
    apply_pattern library_Softlinks library="<library>"


pattern component_library \
    apply_pattern libraryShr library="<library>" ; \
    apply_pattern library_Clinkopts library="<library>" ; \
    apply_pattern library_Cshlibflags library="<library>" ;\
    macro <library>_dependencies "$(<package>_linker_library) " ;\
    apply_pattern generate_rootmap library=<library> group=<group> ; \
    apply_pattern generate_configurables library=<library> group=<group>

pattern linker_library \
    apply_pattern library_path        library="<library>" ; \
    apply_pattern library_Llinkopts   library="<library>" ; \
    apply_pattern library_Lshlibflags library="<library>" ; \
    apply_pattern library_stamps      library="<library>" ; \
    macro <package>_linker_library    "<library>"


#--------------------------------------------
# Patterns for specifically declaring and installing jobOptions files in the
# current installation area
#--------------------------------------------
make_fragment data_installer -header=data_installer_header

pattern declare_joboptions \
    macro_append <package>_joboptions " -s=../share <files> " ; \
    document data_installer install_<name>joboptions prefix=jobOptions $(<package>_joboptions) ; \
    macro_remove constituents " " WIN32 install_<name>joboptions

pattern declare_scripts \
    macro_append <package>_scripts " -s=$(<PACKAGE>ROOT)/share <files> " ; \
    document installer install_<name>scripts $(<package>_scripts) \
      install_dir=$(CMTINSTALLAREA)/share/bin install_command="'$(symlinknew)'"

#--------------------------------------------
# Patterns for specifically declaring and installing python files in the
# current installation area
#--------------------------------------------

cmtpath_pattern \
   macro <project>_install_python "" \
         <project>_without_installarea "" \
         <project>_with_installarea&Unix "<path>/$(<project>_installarea_prefix)/python"\
         <project>_with_installarea&WIN32 "<path>\$(<project>_installarea_prefix)\python" ; \
    path_remove  PYTHONPATH ${<project>_install_python} ; \ 
    path_prepend PYTHONPATH ${<project>_install_python}


pattern declare_python_modules \
    macro_append <package>_python_modules " -s=../python <files> " ; \
    document data_installer install_<name>python_modules prefix=python $(<package>_python_modules) ; \
    macro_remove constituents " " WIN32 install_<name>python_modules


pattern install_python_modules \
    macro <package>_install_python "" \
         <project>_without_installarea&Unix "$(<package>_root)/python" \
         <project>_without_installarea&WIN32 "$(<package>_root)\python" ; \
    path_remove  PYTHONPATH ${<package>_install_python} ; \
    path_prepend PYTHONPATH ${<package>_install_python} ; \
    document install_python <package>_python ; \
    apply_pattern genconfuser ; \
    apply_pattern install_python_init ; \
    macro_append <package>_python_init_dependencies " <package>_python " ;
    
pattern install_custom_python_modules \
    macro <package>_install_python "" \
         <project>_without_installarea&Unix "$(<package>_root)/<source>" \
         <project>_without_installarea&WIN32 "$(<package>_root)\<source>" ; \
    path_remove  PYTHONPATH ${<package>_install_python} ; \ 
    path_prepend PYTHONPATH ${<package>_install_python} ; \
    document install_python <package>_<source>_<offset>_python source=<source> offset=<offset> ; \
    apply_pattern install_python_init ; \
    macro_append <package>_python_init_dependencies " <package>_<source>_<offset>_python " ;

make_fragment install_python -header=install_python_header


pattern install_python_init \
	document python_init <package>_python_init package=<package>

make_fragment python_init -header=python_init_header

# creates an python extension binary modules with the "pyd" file extension

pattern pyd_module \
  macro <package>_install_pyd_module "" \
        <project>_without_installarea&Unix "$(<package>_root)/$(tag)" \
        <project>_without_installarea&WIN32 "$(<package>_root)\$(tag)" ; \
  path_remove  PYTHONPATH $(<package>_install_pyd_module) ; \ 
  path_prepend PYTHONPATH $(<package>_install_pyd_module) ; \
  macro <module>_shlibflags  "$(libraryshr_linkopts) $(use_linkopts)" ;\
  macro_append <module>_dependencies " <name> " ; \
  private ; \
  macro shlibsuffix "$(shlibsuffix)" target_<module> "pyd" ; \
  macro library_prefix "$(library_prefix)" target_<module> "" ; \
  macro <module>_install_dir "$(CMTINSTALLAREA)/$(tag)/python" WIN32 "$(CMTINSTALLAREA)\$(tag)\python" ; \
  library <module> -import=Python -target_tag install_dir="$(<module>_install_dir)" <files> ; \
  end_private ; \
  macro_append <module>_cppflags " -ftemplate-depth-64" WIN32 "" ;

cmtpath_pattern \
   macro <project>_install_pyd_module "" \
         <project>_without_installarea "" \
         <project>_with_installarea&Unix "<path>/$(<project>_installarea_prefix)/$(tag)/python" \
         <project>_with_installarea&WIN32 "<path>\$(<project>_installarea_prefix)\$(tag)\python" ; \
    path_remove  PYTHONPATH $(<project>_install_pyd_module) ; \ 
    path_prepend PYTHONPATH $(<project>_install_pyd_module) ; 


action CompilePython "python -m compileall $(CMTINSTALLAREA)/python $(CMTINSTALLAREA)/scripts" \
	    WIN32        "python -m compileall $(CMTINSTALLAREA)\python $(CMTINSTALLAREA)\scripts"
	    
macro_remove cmt_actions_constituents "CompilePython "
macro_remove cmt_actions_constituentsclean "CompilePythonclean "

#--------------------------------------------
# Patterns for specifically declaring and installing script files in the
# current installation area
#--------------------------------------------

cmtpath_pattern \
   macro scripts_offset "." ; \
   macro scripts_maindir "scripts" ; \
   macro scripts_dir "$(scripts_maindir)"

#cmtpath_pattern \
#   macro scripts_offset "share" ; \
#   macro scripts_maindir "bin" ; \
#   macro scripts_dir "$(scripts_offset)/$(scripts_maindir)" WIN32 "$(scripts_offset)\$(scripts_maindir)"

cmtpath_pattern \
   macro <project>_install_scripts "" \
         <project>_without_installarea "" \
         <project>_with_installarea&Unix "<path>/$(<project>_installarea_prefix)/$(scripts_dir)"\
         <project>_with_installarea&WIN32 "<path>\$(<project>_installarea_prefix)\$(scripts_dir)" ; \
    path_remove  PATH ${<project>_install_scripts} ; \ 
    path_prepend PATH ${<project>_install_scripts}

pattern install_scripts \
    macro <package>_install_scripts "" \
         <project>_without_installarea&Unix "$(<package>_root)/$(scripts_dir)" \
         <project>_without_installarea&WIN32 "$(<package>_root)\$(scripts_dir)" ; \
    path_remove  PATH ${<package>_install_scripts} ; \ 
    path_prepend PATH ${<package>_install_scripts} ; \
    document install_scripts install_scripts source=$(scripts_dir) offset=$(scripts_offset) 
    
    
make_fragment install_scripts -header=install_scripts_header



#--------------------------------------------
# Patterns for declaring and installing run-time files in the ../run
# directory of the current package
#
#  Change in the syntax : the extras parameter is becoming obsolete and is 
#  replaced with files extras is kept for backward compatibility but will 
#  soon be made obsolete 
#--------------------------------------------

#
# Some data files are specified using a directory.
#
macro install_command 'python $(GaudiPolicy_root)/cmt/fragments/install.py -xCVS -x.svn -x*~ -x*.stamp --log=./install.history '
macro uninstall_command 'python $(GaudiPolicy_root)/cmt/fragments/install.py -u --log=./install.history '

macro remove_command "$(cmt_uninstallarea_command)"

macro library_install_command "python $(GaudiPolicy_root)/cmt/fragments/install.py -xCVS -x.svn -x*~ -x*.stamp -s --log=./install.history " \
      VisualC                 "copy "
macro cmt_installarea_command "python $(GaudiPolicy_root)/cmt/fragments/install.py -xCVS -x.svn -x*~ -x*.stamp -s --log=./install.history " \
      WIN32                   "xcopy /S /E /Y "

pattern declare_runtime \
    macro_append <package>_runtime " -s=../share <files> <extras> " ; \
    macro_append use_runtime " $(<package>_runtime) " ; \
    document installer install_<name>runtime $(<package>_runtime) \
      install_dir=$(CMTINSTALLAREA)/share

pattern declare_runtime_extras \
    apply_pattern declare_runtime files="<files>" extras="<extras>" name="<name>"

pattern install_runtime \
    macro data "$(use_runtime)" ; \
    document get_files <name>get_files install_dir=../run/ copymethod=<method>



make_fragment get_files -header=get_files_header

pattern get_files \
    macro <name>jo "<jo>" ; \
    macro <name>scripts "<scripts>" ; \
    macro <name>data "<data>" ; \
    macro <name>xmls "<xmls>" ; \
    document get_files <name>get_files install_dir=../run/ copymethod=<method> name=<name>




# ===== special cases: the library name is derived from the package name ====
#                   <package> and <package>Lib

# <package> linker library patterns ==========================================


pattern package_stamps \
    apply_pattern library_stamps library="<package>"

pattern package_linkopts \
    apply_pattern library_Llinkopts library="<package>"

pattern package_shlibflags \
    apply_pattern library_Lshlibflags library="<package>"

pattern package_libraries \
    apply_pattern library_Softlinks library="<package> <package>Lib <package>Dict"


# <package> component library patterns ========================================

pattern packageShr \
    apply_pattern libraryShr library="<package>"

pattern package_Clinkopts \
    apply_pattern library_Clinkopts library="<package>"

pattern package_Cshlibflags \
    apply_pattern library_Cshlibflags library="<package>"


# <package>Lib linker library built with a <package> component library========

pattern package_Lstamps \
    apply_pattern library_stamps library="<package>Lib"

pattern package_Llinkopts \
    apply_pattern library_Llinkopts library="<package>Lib"

pattern package_Lshlibflags \
    apply_pattern library_shlibflags library="<package>Lib"

# <package> static library patterns ========================================

pattern package_Slinkopts \
macro <package>_linkopts "$(<package>Dir)/lib<package>.a -u <package>_loadRef"\
       WIN32   "$(<package>Dir)/<package>.lib /include:_<package>_loadRef "

# <package> Fortran library patterns =======================================

pattern package_Flinkopts \
    macro <package>_linkopts "$(<package>Dir)/lib<package>.a "\
                     WIN32   "$(<package>Dir)/<package>.lib "
    
macro dq '"'
pattern package_fflags \
  macro <package>_fflags   ' ' \
WIN32 '/fpp:$(dq)/I$(<PACKAGE>ROOT)$(dq) /fpp:$(dq)/I$(<PACKAGE>ROOT)/src$(dq)'

# handle LD_LIBRARY_PATH ====================================================

pattern ld_library_path \
    path_remove LD_LIBRARY_PATH "/<package>/" WIN32 "" ; \
    path_append LD_LIBRARY_PATH ""\
        <project>_without_installarea&Unix   "${<package>_root}/${<package>_tag}" ; \
    path_remove PATH "" WIN32  "\<package>\" ; \
    path_prepend PATH "" \
        <project>_without_installarea&WIN32   "${<package>_root}/${<package>_tag}" ; \
    path_remove DYLD_LIBRARY_PATH "" Darwin "/<package>/" ; \
    path_append DYLD_LIBRARY_PATH "" \
        <project>_without_installarea&Darwin "${<package>_root}/${<package>_tag}"

# to add the application_path to LD_LIBRARY_PATH on Unix
pattern application_path \
    path_remove  LD_LIBRARY_PATH  "/<package>/" WIN32 "" ; \
    path_prepend LD_LIBRARY_PATH  "" \
        <project>_without_installarea&Unix "${<package>_root}/$(<package>_tag)"

pattern generate_rootmap \
  document genmap <library>RootMap -group=<group> LIBNAME=<library> ; \
  macro_append <library>RootMap_dependencies " <library> " ; \
  private ; \
    apply_pattern application_path ; \
    macro merge_rootmap_tag "--do-merge"   \
	  do_merge_rootmap  "--do-merge"   \
	  no_merge_rootmap  "--un-merge" ; \
    document merge_rootmap <library>MergeMap -group=<group> \
             library=<library> \
             merge_rootmap_switch=$(merge_rootmap_tag) \
             $(bin)$(library_prefix)<library>.$(shlibsuffix) ; \
    macro_append <library>MergeMap_dependencies " <library>RootMap " ; \
  end_private


# Tags and Global macros=====================================================

macro BINDIR              "$(tag)"\
    CERN                  "$(tag)"\
    CERN_WIN32            "$(tag)"\
    LOCAL                 "$(tag)"\
    static              "${CMTCONFIG}"

tag slc3_ia32_gcc323_cov   slc3_ia32_gcc323_dbg coverage
tag slc3_ia32_gcc323_pro   slc3_ia32_gcc323_dbg profiled

tag slc3_ia32_gcc344_cov   slc3_ia32_gcc344_dbg coverage
tag slc3_ia32_gcc344_pro   slc3_ia32_gcc344_dbg profiled

tag slc4_ia32_gcc34_cov   slc4_ia32_gcc34_dbg coverage
tag slc4_ia32_gcc34_pro   slc4_ia32_gcc34_dbg profiled

tag slc4_amd64_gcc34_cov   slc4_amd64_gcc34_dbg coverage
tag slc4_amd64_gcc34_pro   slc4_amd64_gcc34_dbg profiled

# ATLAS CMTCONFIG Tags
tag i686-slc3-gcc323-opt  slc3_gcc323
tag i686-slc3-gcc323-dbg  slc3_gcc323_dbg
tag i686-slc4-gcc34-opt   slc4_gcc34      slc4-ia32 32 gcc optimized
tag i686-slc4-gcc34-dbg   slc4_gcc34_dbg  slc4-ia32 32 gcc debug
tag x86_64-slc4-gcc34-opt slc4_gcc34      64 gcc optimized
tag x86_64-slc4-gcc34-dbg slc4_gcc34_dbg  64 gcc debug
tag i386-mac104-gcc40-opt Darwin gcc40 gcc-4.0 optimized
tag i386-mac104-gcc40-dbg Darwin gcc40 gcc-4.0 optimized
 
tag fc1_gcc323          Linux FedoraCore1 gcc-3.2.3 optimized
tag fc1_gcc323opt       Linux FedoraCore1 gcc-3.2.3 optimized
tag fc1_gcc323_dbg      Linux FedoraCore1 gcc-3.2.3 debug

tag fc2_gcc323          Linux FedoraCore2 gcc-3.2.3 optimized
tag fc2_gcc323opt       Linux FedoraCore2 gcc-3.2.3 optimized
tag fc2_gcc323_dbg      Linux FedoraCore2 gcc-3.2.3 debug

# MAC OS X (Darwin)
tag Darwin-gcc          Darwin gcc-4.0
tag Darwin-gcc-dbg      Darwin gcc-4.0 debug
tag Darwin-gcc-opt      Darwin gcc-4.0 optimized
tag Darwin-gcc-prof     Darwin gcc-4.0 optimized profiled

# Windows with VC++ 
tag Win32               WIN32 vc++6.0
tag Win32Debug          WIN32 vc++6.0  debug

# Specify Common Unix tag associations
tag Linux   Unix
tag Darwin  Unix

# Tag for using distcc
tag CERNDISTCC CERN distcc

#backward compatibility for cmt < v1r14. Does it work/matter?
tag Unix&static UnixStatic

# Fragments =================================================================

# MS DeveloperStudio 
make_fragment dsp_application_header
make_fragment dsp_library_header
make_fragment dsp_all

# make fragment for the rule checker
make_fragment rule_checker -header=rule_checker_header -trailer=rule_checker_trailer -suffix=viol
make_fragment rule_checker_trailer

# vsnet fragments, which override premature efforts now in CMT v1r14
make_fragment vcproj_library_header
make_fragment vcproj_application_header
make_fragment vcproj_all
make_fragment vcproj_trailer
make_fragment vcproj_contents
make_fragment vcproj_directory_header
make_fragment vcproj_directory_trailer

make_fragment sln_header
make_fragment sln_project
make_fragment sln_trailer
make_fragment sln_project_config
make_fragment sln_dependency_project

make_fragment sln_dependency_header
make_fragment sln_dependency_trailer

macro vsCONFIG   "Release"   debug  "Debug"
macro vsDebug    "2"         debug  "1"
macro vsOptimize "2"         debug  "0" 
macro vsVersion  ""   vc++7.1  "7.10"  vc++7.0 "7.00"
macro package_GUID "{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}"
macro GUID_all "{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC955}"

macro make_shlib    "echo" \
      HP-UX         "${CMTROOT}/mgr/cmt_make_shlib_common.sh extract" \
      OSF1          "${CMTROOT}/mgr/cmt_make_shlib_common.sh noextract" \
      Linux         "${CMTROOT}/mgr/cmt_make_shlib_common.sh extract" \
      CYGWIN        "${CMTROOT}/mgr/cmt_make_shlib_common.sh extract" \
      SunOS         "${CMTROOT}/mgr/cmt_make_shlib_common.sh extract" \
      Darwin        "${CMTROOT}/mgr/cmt_make_shlib_common.sh extract" \
      VisualC       "$(GAUDIPOLICYROOT)\cmt\cmt_make_shlib.bat"

macro merge_rootmap_cmd ${GaudiPolicy_root}/cmt/fragments/merge_files.py
make_fragment merge_rootmap -header=merge_rootmap_header
macro libdirname "lib" # defaults for fragments of libs and bins 
macro bindirname "bin" # defaults for fragments of libs and bins


# Compilation and Linking flags==============================================

macro  cpp           "g++" \
       slc4&gcc323   "gcc32" \
       Darwin        "c++"

# use of the "distcc" utility

macro_prepend cpp "" \
	distcc	"distcc "

macro_prepend cc "" \
	distcc	"distcc "

macro_prepend for "" \
	distcc	"distcc "


# use of the "ccache" utility with or without "distcc"

set CCACHE_PREFIX "" ccache&distcc "distcc"

macro_remove cpp "" \
	ccache&distcc	"distcc "
macro_prepend cpp "" \
	ccache	"ccache "

macro_remove cc "" \
	ccache&distcc	"distcc "
macro_prepend cc "" \
	ccache	"ccache "

macro_remove for "" \
	ccache&distcc	"distcc "
macro_prepend for "" \
	ccache	"ccache "



# Setup overrides for 32-bit mode on a 64-bit machine
macro_append cpp          "" x86_64&gcc&32 " -m32"
macro_append cc           "" x86_64&gcc&32 " -m32"
macro_append shlibbuilder "" x86_64&gcc&32 " -m32"


# C++ debug, optimized and profiled options
macro cppdebugflags    "" \
      debug            "$(cppdebugflags_s)"\
      optimized        "$(cppoptimized_s)"
macro cppdebugflags_s  "-g" \ 
      WIN32            "/Od /Z7"
macro cppoptimized_s   "-O2" \
      WIN32            "" 
macro cppprofiled_s   "-pg" \
      WIN32            "" 
macro_append cppdebugflags "" \
      profiled        " $(cppprofiled_s)"
macro cppcoverage_s   "-fprofile-arcs -ftest-coverage" \
      WIN32            "" 
macro_append cppdebugflags "" \
      coverage        " $(cppcoverage_s)"

      
# C debug, optimized and profiled options
macro cdebugflags     "" \
      debug           "$(cdebugflags_s)"
macro cdebugflags_s   "-g" \
      WIN32           "/Od /Z7"
macro ccoverage_s     "-fprofile-arcs -ftest-coverage" \
      WIN32            "" 
macro_append cdebugflags "" \
      coverage        " $(ccoverage_s)"


# Fortran debug, optimized and profiled options 
macro fdebugflags      "" \
      debug            "$(fdebugflags_s)"
macro fdebugflags_s    "-g"\ 
      WIN32            "/nopdbfile /debug:full /optimize:0"
macro foptimized_s     "-O2" \
      WIN32            "" 
macro_append fdebugflags "" \
      optimized        " $(foptimized_s)"
macro fprofiled_s      "-pg" \
      WIN32            "" 
macro_append fdebugflags "" \
      profiled        " $(fprofiled_s)"
macro fcoverage_s     "-fprofile-arcs -ftest-coverage" \
      WIN32            "" 
macro_append fdebugflags "" \
      coverage        " $(fcoverage_s)"

# Link debug options
macro linkdebugflags   "" \
      debug            "$(linkdebugflags_s)"
macro linkdebugflags_s "" \
      WIN32            "/debug /verbose:lib "


macro linkcoverage_s   "-lgcov" \
      WIN32            ""

macro_append linkdebugflags "" \
      coverage        " $(linkcoverage_s)"

macro_append use_linkopts "" \
	coverage            " $(linkcoverage_s) " 



macro cppflags  " -fmessage-length=0 -Df2cFortran -fPIC -shared -D_GNU_SOURCE -Dlinux -Dunix -pipe -ansi -Wall -Wextra -pthread " \
      Darwin    " -Df2cFortran -fPIC -D_GNU_SOURCE -Dunix -pipe -ansi -Wall -Wextra -Wno-long-double " \
      WIN32     '$(includes) /D "WIN32" /D "_MBCS"  /D "_WINDOWS" /FD /c /nologo /W3 /GX /MD /GR /Zm500'

# macro_append cppflags " -msse2 -mfpmath=sse" \
#             WIN32    " /arch:SSE2"

macro_append cppflags  "" \
             slc4-ia32 " -m32"

# FIXME: (MCl) Temporaty work-around until gccxml understands unordered_map
macro_append cppflags "" \
              gcc43 " -Wno-deprecated"

# ppcmd=-I can be used on Windows as on Linux
macro ppcmd "-I"

# Fortran compiler
macro for       "g77" \
      Darwin    "gfortran -ff2c" \
      WIN32     "f77.exe"
macro_append fflags  "" \
      slc4-ia32      " -m32"

macro_append shlibflags ""\
             slc4-ia32  " -m32"

macro fflags    "-fmessage-length=0 -O2 -fdollar-ok -ff90 -w -fPIC" \
      Darwin    "-fno-automatic -fdollar-ok -w" \
      WIN32     '/compile_only /nologo /warn:nofileopt /warn:nouncalled /fpp:"/m" /fpp:"/I.." '

# macro_append fflags " -msse2 -mfpmath=sse" \
#             WIN32    " "

macro fcomp     "$(for) -c $(fincludes) $(fdebugflags) $(fflags) $(pp_fflags)" \
      WIN32     "$(for) $(fdebugflags) $(fflags) $(pp_fflags)"

# C compiler

macro_append cflags " -fmessage-length=0 -fPIC " \
             WIN32    " "
macro_append cflags  "" \
      slc4-ia32      " -m32"	

# macro_append cflags " -msse2 -mfpmath=sse" \
#             WIN32    " /arch:SSE2"

# Link options

# Note that we can't perform strict static linking since some external
# packages do not provide static libraries. Thus the only possible
# strategy is to use a dynamic link strategy, but to link against the
# explicit static libraries (using <path>/lib<pkg>.a) where feasible.
# The following allows for potential platform-specific overrides of the
# defaults.

macro makeLinkMap     ""\
      Linux           "-Wl,-Map,Linux.map"\
      WIN32           "/map"

macro cpplinkflags "" \
      Linux          "-Wl,-Bdynamic $(linkdebugflags) -Wl,--as-needed " \
      vc++6.0        "/nologo /machine:ix86 $(linkdebugflags) $(makeLinkMap) /nodefaultlib kernel32.lib user32.lib ws2_32.lib advapi32.lib shell32.lib msvcrt.lib msvcprt.lib msvcirt.lib oldnames.lib " \ 
      vc++7.0        "/nologo /machine:ix86 $(linkdebugflags) $(makeLinkMap) /nodefaultlib kernel32.lib user32.lib ws2_32.lib advapi32.lib shell32.lib msvcrt.lib msvcprt.lib oldnames.lib "  \
      vc++7.1        "/nologo /machine:ix86 $(linkdebugflags) $(makeLinkMap) /nodefaultlib kernel32.lib user32.lib ws2_32.lib advapi32.lib shell32.lib msvcrt.lib msvcprt.lib oldnames.lib "  

macro_append cpplinkflags "" \
      Linux      "-Wl,--no-undefined " 

macro_append cpplinkflags  ""\
      Unix&static           " -ldl"

macro_append cpplinkflags  ""\
      slc4-ia32            " -m32"

macro_append cpplinkflags "" \
      coverage " $(linkdebugflags) "

macro_append cpplinkflags "" \
      profiled        " $(cppprofiled_s)"

macro cpplink         "$(cpp) $(cpplinkflags)" \
      WIN32           "link.exe $(cpplinkflags)"

macro componentshr_linkopts "" \
      Linux                 "-fPIC -Wl,-s -ldl -Wl,--as-needed " \
      WIN32                 "/DLL "

macro_append componentshr_linkopts "" \
      Linux        "-Wl,--no-undefined " 

macro_remove componentshr_linkopts "" \
      debug                        "-Wl,-s" \
      coverage                     "-Wl,-s"

macro_append componentshr_linkopts "" \
      coverage  " $(linkdebugflags) "

macro_append componentshr_linkopts "" \
      slc4-ia32   " -m32"

macro libraryshr_linkopts   "" \
      Linux                 "-fPIC -ldl -Wl,--as-needed " \
      WIN32                 "/DLL"

macro_append libraryshr_linkopts "" \
      Linux            "-Wl,--no-undefined "

macro_append libraryshr_linkopts   "" \
	coverage  " $(linkdebugflags) "

macro_append libraryshr_linkopts   "" \
        slc4-ia32             " -m32"

macro application_linkopts  "" \
      Linux                 "-Wl,--export-dynamic "

macro shlibsuffix   "so" \
      WIN32         "dll"


#cmtpath_pattern \
#   path_prepend PATH <path>/$(cmt_installarea_prefix)/share/bin

#private

#apply_pattern get_files scripts=symlink.sh name=GaudiPolicy

#macro GaudiPolicy_CMT_files "../src/symlink.sh"

#-------------------------------------------------------------------
# SLC3 backward compatibility
#-------------------------------------------------------------------
# Marco Clemencic: this section is meant to collect all the hacks to allow
#                  compilation on SCL3/gcc3.2.3, so that it can be removed easily  

# Options that gcc 3.2.3 does not understand: 

# * "-Wextra" is the new name of "-W"
macro_remove cppflags      "" \
      slc3_ia32_gcc323     "-Wextra" \
      slc3_ia32_gcc323_dbg "-Wextra"
macro_append cppflags      "" \
      slc3_ia32_gcc323     "-W" \
      slc3_ia32_gcc323_dbg "-W"

# * "--as-needed" (linker)
macro_remove cpplinkflags  "" \
      slc3_ia32_gcc323     "-Wl,--as-needed" \
      slc3_ia32_gcc323_dbg "-Wl,--as-needed"
macro_remove componentshr_linkopts  "" \
      slc3_ia32_gcc323              "-Wl,--as-needed" \
      slc3_ia32_gcc323_dbg          "-Wl,--as-needed"
macro_remove libraryshr_linkopts  "" \
      slc3_ia32_gcc323            "-Wl,--as-needed" \
      slc3_ia32_gcc323_dbg        "-Wl,--as-needed"


#-------------------------------------------------------------------
# begin of genconf
#-------------------------------------------------------------------
public

#
# to disable genconf for a package add to the requirements file:
#
# private
#  apply_tag no_genconf
# end_private
#
# Conversely, to explicitly enable the configurable generation for a package:
# private
#  apply_tag do_genconf
# end_private
#

macro genconfDir    "/genConf/" \
      WIN32         "\genConf\"

cmtpath_pattern \
    macro genconfInstallDir "" \
       <project>_without_installarea&Unix "$(<package>_root)/python" \
       <project>_without_installarea&WIN32 "$(<package>_root)\python" \
       <project>_with_installarea&Unix "<path>/$(<project>_installarea_prefix)/python"\
       <project>_with_installarea&WIN32 '"<path>\$(<project>_installarea_prefix)\python"'

make_fragment genconfig -header=genconfig_header

macro merge_genconfDb_cmd ${GaudiPolicy_root}/cmt/fragments/merge_files.py
make_fragment merge_genconfDb -header=merge_genconfDb_header

## genconf configuration defaults
macro genconfig_configurableModuleName "GaudiKernel.Proxy"
macro genconfig_configurableDefaultName "Configurable.DefaultName"
macro genconfig_configurableAlgorithm "ConfigurableAlgorithm"
macro genconfig_configurableAlgTool "ConfigurableAlgTool"
macro genconfig_configurableAuditor "ConfigurableAuditor"
macro genconfig_configurableService "ConfigurableService"

## add pattern and macro for library preloading for genconf

macro genconfig_preload ""

pattern genconfig_add_preload \
   macro_append genconfig_preload "--load-library=<library> " ;

# this pattern creates the helper library 

pattern genconf_helper_lib \
   library <package>GenConfHelperLib <src> ; \
   macro <package>_genconfig_preload_lib "$(<package>_root)/$(tag)/$(library_prefix)<package>GenConfHelperLib.$(shlibsuffix)" \
              WIN32             "$(<package>_root)\$(tag)\$(library_prefix)<package>GenConfHelperLib.$(shlibsuffix)" ; \
   macro <package>GenConfHelperLib_shlibflags "$(<package>GenConfHelperLib_use_linkopts)" ; \
   apply_pattern linker_library library=<package>GenConfHelperLib ; \
   macro_remove <package>_linkopts " -l<package>GenConfHelperLib" \
              WIN32                " <package>GenConfHelperLib.lib" ; \
   macro_append <package>Conf_dependencies " <package>GenConfHelperLib "

# this pattern uses the helper library. the "pkg" argument is the package
# containing the helper lib

pattern use_genconf_helper_lib \
   private ; \
   apply_pattern genconfig_add_preload library=$(<pkg>_genconfig_preload_lib) ; \
   end_private


# this use statement is here only to get the building order right
# ie: tell CMT that genconf needs (at runtime) the GaudiSvc component 
#     library to be available for loading.
macro use_GaudiSvc "GaudiSvc v* -no_auto_imports" \
        no_genconf "" \
        do_genconf "GaudiSvc v* -no_auto_imports" \
        ATLAS "GaudiSvc v* -no_auto_imports"

# if one wants to modify this pattern, the correction has to be made also
# in the GaudiSvc requirements file since it is using directly 
# generate_configurables_internal to avoid infinite recursion
# with "use GaudiSvc"
pattern generate_configurables \
  private ; \
   use $(use_GaudiSvc) ;\
   apply_pattern generate_configurables_internal library=<library> group=<group> ; \
  end_private

pattern generate_configurables_internal \
  macro <package>_genConf_python "" \
       <project>_without_installarea&Unix "$(genconfInstallDir)" \
       <project>_without_installarea&WIN32 "$(genconfInstallDir)" ; \
  path_remove  PYTHONPATH ${<package>_genConf_python} ; \ 
  path_prepend PYTHONPATH ${<package>_genConf_python} ; \
  private ; \
   macro run_genconfig_cmd "do_real_genconfig" \
         no_genconf        "do_null_genconfig" \
         do_genconf        "do_real_genconfig" \
         ATLAS             "do_real_genconfig" ; \
   apply_pattern $(run_genconfig_cmd) library=<library> group=<group> ; \
  end_private

pattern do_real_genconfig \
  document genconfig <library>Conf -s=../$(tag) -group=<group> \
           outdir=$(<package>_root)$(genconfDir)<package> \
           library=<library> \
	   library_preload=$(genconfig_preload) \
           conf_destdir=$(genconfInstallDir) \
           confModuleName=$(genconfig_configurableModuleName) \
           confDefaultName=$(genconfig_configurableDefaultName) \
           confAlgorithm=$(genconfig_configurableAlgorithm) \
           confAlgTool=$(genconfig_configurableAlgTool) \
           confAuditor=$(genconfig_configurableAuditor) \
           confService=$(genconfig_configurableService) \
           $(library_prefix)<library>.$(shlibsuffix) ; \
  macro_append <library>Conf_dependencies " <library> " ; \
  apply_pattern install_python_init package=<group><package> ; \
  macro_append <group><package>_python_init_dependencies " <library>Conf " ; \
  private ; \
    macro merge_genconfDb_tag "--do-merge"   \
	  do_merge_genconfDb  "--do-merge"   \
	  no_merge_genconfDb  "--un-merge" ; \
    document merge_genconfDb <library>ConfDbMerge -group=<group> \
	     inDir=$(<package>_root)$(genconfDir)<package> \
             library=<library> \
	     merge_genconfDb_switch=$(merge_genconfDb_tag)  \
	     $(bin)$(library_prefix)<library>.$(shlibsuffix) ; \
    macro_append <library>ConfDbMerge_dependencies " <library>Conf " ; \
  end_private


pattern do_null_genconfig \
  private ; \
   macro dummy_for_<library>Conf "<library> <group>" ; \
  end_private

#-------------------------------------------------------------------
# end of genconf
#-------------------------------------------------------------------

#-------------------------------------------------------------------
# QMTest (Marco Clemencic)
#-------------------------------------------------------------------
# Allow to execute the qmtest actions on packages not applying the
# correct patterns (QMTest or QMTestSummarize)
action qmtest_run "echo This package does not provide QMTest-based tests" 
action qmtest_summarize "echo You need to apply the pattern QMTestSummarize to use this action"
action TestPackage "echo This package does not provide QMTest-based tests" 
action TestProject "echo You need to apply the pattern QMTestSummarize to use this action"

# Pattern used internally by the 2 main patterns
pattern QMTestCommon \
  private ; \
    macro use_qmtest "" QMTest "QMtest v* LCG_Interfaces -no_auto_imports" ; \
    use $(use_qmtest) ; \
    set QMTESTRESULTS "" QMTest "../../$(tag)/results.qmr" ; \
  end_private

# Pattern defining the structure for QMTest-based tests.
#
# The user must:
#  1 - apply the pattern QMTest (in the requirements file)
#  2 - provide the directory <package_root>/tests/qmtest with the xml files
#      describing the tests (files .qmt, examples can be found in GaudiKerenel
#      and GaudiExamples)
#  2b- (optional) provide a test suite (file .qms) with the same name of the
#      package (all lowercase) to specify which tests to run (if not all)
#  3 - make CMTEXTRATAGS=QMTest tests
#  4 - cmt -tag_add=QMTest qmtest_run
#
# Note: Instead of adding CMTEXTRATAGS= or -tag_add=, one can define the
#       environment variable CMTEXTRATAGS.
#
# Suggestion: add a .cvsignore file in <package_root>/tests/qmtest containing
#             the 2 lines:
#                 QMTest
#                 results.qmr
#             This will avoid auto-generated files to go into CVS.
#
pattern QMTest \
  apply_pattern QMTestCommon ; \
  private ; \
    macro qmtest_local_dir "../tests/qmtest" WIN32 "..\tests\qmtest" ; \
    set QMTESTLOCALDIR "" QMTest "$(qmtest_local_dir)" ; \
    action qmtest_run "cmt -tag_add=QMTest run python $(GaudiPolicy_root)/cmt/fragments/run_qmtest.py $(package) $(cmt_args)" ; \
    macro_append qmtest_run_dependencies " tests " ; \
    action TestPackage "cmt qmtest_run $(cmt_args)" ; \
  end_private

# Pattern allowing a package to generate a summary of the results run in the
# packages it depends on (for container packages like GaudiRelease)
pattern QMTestSummarize \
  apply_pattern QMTestCommon ; \
  private ; \
    macro qmtest_summarize_script "$(GaudiPolicy_root)/cmt/fragments/qmtest_summarize.py" ; \
    action qmtest_summarize "cmt -tag_add=QMTest run python $(qmtest_summarize_script) $(cmt_args)" ; \
    action TestProject "cmt br cmt TestPackage ; cmt qmtest_summarize" \
                 WIN32 "cmt br cmt TestPackage & cmt qmtest_summarize" ; \
  end_private

# Add the Gaudi specialized test extension to the QMTest path
path_append QMTEST_CLASS_PATH "" QMTest "$(GAUDIPOLICYROOT)/qmtest_classes"

# These three lines are needed to avoid that "make all_groups" triggers the
# actions it should not trigger. 
macro_remove cmt_actions_constituents 'make'
macro_remove cmt_actions_constituents 'qmtest_run'
macro_remove cmt_actions_constituents 'qmtest_summarize'
macro_remove cmt_actions_constituents 'TestPackage'
macro_remove cmt_actions_constituents 'TestProject'

#-------------------------------------------------------------------
# Pattern to disable a package on ath given platform or combination of tags.
# To be used with something like:
#
#   apply_pattern disable_package_on platform=Darwin
#   apply_pattern disable_package_on platform=slc4-amd64&gcc41
#
# (Marco Clemencic)
#-------------------------------------------------------------------
pattern disable_package_on \
  private ; \
    macro_remove_regexp all_constituents "" \
                       <platform> ".*" ; \
	macro_remove_regexp <package>_stamps "" \
	                   <platform> ".*" ; \
  end_private


#-------------------------------------------------------------------
# Pattern defining a Gaudi application.
# It sets two environment variables that are checked by gaudirun.py to set
# the properties AppName and AppVersion of ApplicationMgr.
#
# Usage:
#
#    apply_pattern GaudiApp
#
# (Marco Clemencic)
#-------------------------------------------------------------------
pattern GaudiApp \
    use Gaudi v* ; \
    set GAUDIAPPNAME "<package>" ; \
    set GAUDIAPPVERSION "<version>"


#-------------------------------------------------------------------
# Generic pattern to call a command.
# It is driven by macros.
# E.g:
# 
#   macro MyCommandTarget_output  "output.file"
#   macro MyCommandTarget_deps    "input.file"
#   macro MyCommandTarget_command "python do_something.py -o $(MyCommandTarget_output) $(MyCommandTarget_deps)"
#
#   apply_pattern CallCommand target=MyCommandTarget
#
# (Marco Clemencic)
#-------------------------------------------------------------------
make_fragment call_command -header=call_command_header
pattern CallCommand \
   document call_command <target> -group=<group> name="<target>"
   
#-------------------------------------------------------------------
# Pattern to create a <package>Version.h header file in the InstallArea/include.
# Usage:
#
#   apply_pattern ProjectVersionHeader proj=Gaudi
#
# (Marco Clemencic)
#-------------------------------------------------------------------
pattern ProjectVersionHeader \
	private ; \
	macro ProjectVersionHeader_output "$(CMTINSTALLAREA)/include/<project>_VERSION.h" ; \
	macro ProjectVersionHeader_deps "../cmt/requirements" ; \
	macro ProjectVersionHeader_command "python $(GaudiPolicy_root)/cmt/fragments/createProjVersHeader.py <project> <version> $(ProjectVersionHeader_output)" \
	     <project>_without_installarea "" ; \
	apply_pattern CallCommand target=ProjectVersionHeader ; \
	end_private ; \
	set <project>VERS "<version>"

#-------------------------------------------------------------------
# Generic cmt template processing
# take "fichier.tmpl" as input and outputs "fichier" with all 
# cmt macros expanded. E.g:
#
#  document template DoxyTemplate -s=../doc *.tmpl
#
#-------------------------------------------------------------------

make_fragment template -header=template_header -dependencies

#-------------------------------------------------------------------
# Path cleaner
#-------------------------------------------------------------------

macro strip_script "$(GAUDIPOLICYROOT)/scripts/StripPath" WIN32 "$(GAUDIPOLICYROOT)\scripts\StripPath" 

cmtpath_pattern \
    setup_script $(strip_script) ;

#-------------------------------------------------------------------
# genconfuser (Marco Clemencic)
# Create a confDb.py file for ConfigurableUser specializations
# 
#-------------------------------------------------------------------
macro GenConfUser_script "genconfuser.py" \
                   WIN32 "genconfuser.bat"
pattern real_genconfuser \
	private ; \
	macro <package>GenConfUser_output "$(<package>_root)$(genconfDir)<package>/<package>_user_confDb.py" \
	                            WIN32 "$(<package>_root)$(genconfDir)<package>\<package>_user_confDb.py" ; \
	macro <package>GenConfUser_python "$(<package>_root)/python" \
                                    WIN32 "$(<package>_root)\python" ; \
	macro <package>GenConfUser_command "$(GenConfUser_script) -r $(<package>GenConfUser_python) -o $(<package>GenConfUser_output) <package> $(<package>ConfUserModules)" ; \
	apply_pattern CallCommand target=<package>GenConfUser ; \
	document merge_genconfDb <package>ConfUserDbMerge -group=<group> \
		inDir=$(<package>_root)$(genconfDir)<package> \
		library=<package>_user \
		merge_genconfDb_switch="--do-merge" ; \
	macro_append <package>_python_init_dependencies " <package>GenConfUser " ; \
	macro_append <package>ConfUserDbMerge_dependencies " <package>GenConfUser <package>_python " ; \
	end_private

pattern fake_genconfuser

pattern genconfuser \
	private ; \
	macro do_genconfuser "real_genconfuser" \
	    skip_genconfuser "fake_genconfuser" ; \
	apply_pattern $(do_genconfuser) ; \
	end_private

#-------------------------------------------------------------------
# Doxygen business
#-------------------------------------------------------------------

make_fragment doxygen -header=doxygen_header -dependencies

pattern doxy_vers_set \
	set <external>VERS "$(<external>_config_version)"

apply_pattern doxy_vers_set external=POOL
apply_pattern doxy_vers_set external=COOL
apply_pattern doxy_vers_set external=CORAL
apply_pattern doxy_vers_set external=ROOT
apply_pattern doxy_vers_set external=Boost
apply_pattern doxy_vers_set external=uuid
apply_pattern doxy_vers_set external=PCRE
apply_pattern doxy_vers_set external=GCCXML
apply_pattern doxy_vers_set external=AIDA
apply_pattern doxy_vers_set external=XercesC
apply_pattern doxy_vers_set external=GSL
apply_pattern doxy_vers_set external=Python
apply_pattern doxy_vers_set external=HepMC
apply_pattern doxy_vers_set external=QMtest
# This one is special
set LCGCMTVERS "$(LCG_config_version)"

# Base directory of doxygen documentation
set GAUDI_DOXY_HOME $(GAUDI_home)/GaudiRelease/doc
