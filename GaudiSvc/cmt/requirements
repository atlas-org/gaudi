package GaudiSvc
version v16r5

branches src cmt doc
use GaudiKernel v*
use CLHEP       v* LCG_Interfaces -no_auto_imports
use AIDA        v* LCG_Interfaces -no_auto_imports
use Boost       v* LCG_Interfaces -no_auto_imports
use ROOT        v* LCG_Interfaces -no_auto_imports
use PCRE        v* LCG_Interfaces -no_auto_imports


# build the component library
library GaudiSvc -import=AIDA -import=Boost -import=CLHEP -import=ROOT \
#                 AIDATupleSvc/*.cpp\
                 AlgContextSvc/*.cpp \
                 ApplicationMgr/*.cpp \
                 AuditorSvc/*.cpp \
                 ChronoStatSvc/*.cpp \
                 EventSelector/*.cpp \
                 ExceptionSvc/*.cpp \
                 DataSvc/*.cpp \
                 DetectorDataSvc/*.cpp \
                 HistogramSvc/*.cpp \
                 HistorySvc/*.cpp \
                 IncidentSvc/*.cpp \
                 IssueLogger/*.cpp \
                 JobOptionsSvc/*.cpp \
                 MessageSvc/*.cpp \
                 NTupleSvc/*.cpp \
                 ParticlePropertySvc/*.cpp \
                 PersistencySvc/*.cpp \
                 RndmGenSvc/*.cpp \
                 StatusCodeSvc/*.cpp \
                 ToolSvc/*.cpp \
                 THistSvc/*.cpp \
                 FastContainersSvc/*.cpp \
                 Dll/GaudiSvc*.cpp


library GaudiSvcTest -group=tests ../tests/src/component/*.cpp

# define component library link options
apply_pattern library_Clinkopts library=GaudiSvc import=ROOT import2=Reflex import3=Boost
apply_pattern libraryShr        library=GaudiSvc

# this pattern is applied instead of "generate_configurables" to
# avoid infinite recursion.
apply_pattern generate_configurables_internal library=GaudiSvc
apply_pattern generate_configurables_internal library=GaudiSvcTest group=tests

apply_pattern library_Clinkopts library=GaudiSvcTest import=ROOT import2=Reflex import3=Boost
apply_pattern libraryShr        library=GaudiSvcTest

#macro_append Boost_linkopts "$(Boost_linkopts_filesystem) $(Boost_linkopts_regex) $(Boost_linkopts_thread)"

# This is needed because the library used with $(Boost_linkopts_filesystem)
# is the non multithread one.
macro_append Boost_linkopts " $(Boost_linkopts_regex) $(Boost_linkopts_thread)"

# FIXME: (MCl) the check for the tag ROOT_GE_5_15 is a temporary hack for LCG
#              nightlies
macro_append Boost_linkopts ' -lboost_filesystem-gcc-mt ' \
         ROOT_GE_5_15&Linux ' -lboost_filesystem-$(Boost_compiler_version)-mt ' \
        ROOT_GE_5_15&Darwin ' -lboost_filesystem-mt-$(Boost_file_version) ' \
                     Darwin ' -lboost_filesystem-$(Boost_file_version) ' \
                     WIN32  ' boost_filesystem-vc71-mt-$(Boost_file_version).lib '

apply_pattern ld_library_path

#===============================================================
private

apply_pattern library_Cshlibflags library=GaudiSvc
apply_pattern library_Cshlibflags library=GaudiSvcTest


macro_append ROOT_linkopts " -lHist -lReflex -lMatrix -lGraf" \
                     WIN32 " libHist.lib libReflex.lib libMatrix.lib libGraf.lib" \
                    osx104 " -lHist -lReflex -lMatrix -lGraf"
macro_append ROOT_linkopts "" \
       ROOT_GE_5_15&osx104 " -lNet"

#application fileparse_test -group=tests ../src/tests/fileparser_test.cpp -import=Boost
#macro_append fileparse_testlinkopts     " -L../$(tag) -lGaudiSvc" \
#  WIN32                                 " /libpath:$(GAUDISVCROOT)/$(tag) GaudiSvc.lib"

apply_pattern generate_rootmap library=GaudiSvc
apply_pattern generate_rootmap library=GaudiSvcTest group=tests

macro_append cppflags "" \
   Linux " -pedantic -Wwrite-strings -Wpointer-arith -Woverloaded-virtual -Wno-long-long " \
   Darwin "" \
   WIN32 ""

apply_pattern QMTest
